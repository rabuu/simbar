#!/bin/sh

usage='USAGE: simbar --print|--xsetroot --once|--repeat [--config /path/to/config] [--delimiter DEL]'

#
# defaults
#

config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/simbar"
config_file='simbar.modules'
delimiter=' | '
esc_char="$(printf '\037')"

#
# user input
#

multiple_freq_modes() {
	echo 'ERROR: You cannot set multiple frequency modes!' >&2
	echo $usage >&2
}

for arg in "$@"; do
	if [ "$next_is_config" ]; then
		config_dir="$arg"
		next_is_config=''
	elif [ "$next_is_delimiter" ]; then
		delimiter="$arg"
		next_is_delimiter=''
	else
		case "$arg" in
			'-p'|'--print')
				print_mode='print'
				;;
			'-x'|'--xsetroot')
				xsetroot_mode='xsetroot'
				;;
			'-o'|'--once')
				[ -z "$freq_mode" ] && freq_mode='once' || multiple_freq_modes
				;;
			'-r'|'--repeat')
				[ -z "$freq_mode" ] && freq_mode='repeat' || multiple_freq_modes
				;;
			'-c'|'--config')
				next_is_config=1
				;;
			'-d'|'--delimiter')
				next_is_delimiter=1
				;;
			'-h'|'--help')
				echo $usage
				exit 0
				;;
			*)
				echo "ERROR: Unknown argument: $arg" >&2
				echo $usage >&2
				exit 1
				;;
		esac
	fi
done

if [ -z "$print_mode" ] && [ -z "$xsetroot_mode" ]; then
	echo 'ERROR: You have to pass an output mode!' >&2
	echo $usage >&2
	exit 1
fi

if [ -z "$freq_mode" ]; then
	echo 'ERROR: You have to pass a frequency mode!' >&2
	echo $usage >&2
	exit 1
fi

#
# helper functions
#

apply_colorcodes() {
	content=$1
	fg=$2
	bg=$3

	wrapped="$content"

	if [ "$fg" ]; then
		wrapped="^c$fg^$wrapped"
	fi

	if [ "$bg" ]; then
		wrapped="^b$bg^$wrapped"
	fi

	if [ "$fg" ] || [ "$bg" ]; then
		wrapped="$wrapped^d^"
	fi

	printf "$wrapped"
}

check_config() {
	mod_short=$1
	mod=$2
	freq=$3
	fg=$4
	bg=$5

	[ "$fg" = 'xgetres' ] && fg="$(xgetres "simbar.${mod_short}.fg")"
	[ "$bg" = 'xgetres' ] && bg="$(xgetres "simbar.${mod_short}.bg")"

	invalid_config=''

	if printf "$mod_short" | grep -q '^#'; then
		invalid_config='true'
	elif ! [ -x "$mod" ]; then
		echo "ERROR: Module $mod not found or not executable!" >&2
		invalid_config='true'
	fi

	if ! [ "$freq" -eq "$freq" ] 2> /dev/null; then
		freq=0
	fi

	if ! [ "$invalid_config" ] && [ "$(printf "$fg" | grep -E '^#[A-Fa-f0-9]{6}$')" != "$fg" ]; then
		echo "ERROR: $fg is not a valid hex color code" >&2
		invalid_config='true'
	fi

	if ! [ "$invalid_config" ] && [ "$(printf "$bg" | grep -E '^#[A-Fa-f0-9]{6}$')" != "$bg" ]; then
		echo "ERROR: $bg is not a valid hex color code" >&2
		invalid_config='true'
	fi
}

#
# cache
#

cache_module() {
	mod=$1

	mod_regex="$(printf "$mod" | sed 's/\//\\\//g')"

	cache="$(printf "$cache" | sed "/^$mod_regex/d")"
	cache="$cache\n$mod$esc_char$($mod)"
}

get_value_from_cache() {
	mod=$1

	mod_regex="$(printf "$mod" | sed 's/\//\\\//g')"

	printf "$cache" | grep "^$mod_regex" | cut -d"$esc_char" -f2
}

#
# main bar generation function
#

generate_bar() {
	sec=$1

	# reset bar
	bar=''

	# load modules.conf
	if ! [ -f "$config_dir/$config_file" ]; then
		echo "ERROR: No config file found: $config_dir/$config_file" >&2
		exit 1
	fi
	config="$(cat "$config_dir/$config_file")"

	IFS=$'
'
	for line in $config; do
		line="$line "
		mod_short="$(printf $line | cut -d' ' -f1)"
		mod="$config_dir/modules/$(printf $line | cut -d' ' -f1)"
		freq="$(printf $line | cut -d' ' -f2)"
		fg="$(printf $line | cut -d' ' -f3)"
		bg="$(printf $line | cut -d' ' -f4)"

		check_config "$mod_short" "$mod" "$freq" "$fg" "$bg"
		if ! [ "$invalid_config" ]; then
			if [ "$freq" -ge 1 ] && [ $(($sec % $freq)) -eq 0 ]; then
				cache_module "$mod"
			else
				printf "$cache" | grep -q "^$mod" || cache_module "$mod"
			fi

			out="$(apply_colorcodes "$(get_value_from_cache "$mod")" "$fg" "$bg")"
			[ "$bar" ] && bar="$bar\n$out" || bar="$out"
		fi
	done

	bar="$(printf "$bar " | tr '\n' "$esc_char" | sed "s/$esc_char/$delimiter/g")"
}

#
# main routine
#

if [ "$freq_mode" = 'once' ]; then
	generate_bar 0
	if [ "$print_mode" ]; then
		printf "$bar"
	fi

	if [ "$xsetroot_mode" ]; then
		xsetroot -name "$bar"
	fi
elif [ "$freq_mode" = 'repeat' ]; then
	sec=0
	while true; do
		generate_bar "$sec"

		if [ "$print_mode" ]; then
			echo "$bar"
		fi

		if [ "$xsetroot_mode" ]; then
			xsetroot -name "$bar"
		fi

		sleep 1
		sec=$((sec + 1))
	done
fi
